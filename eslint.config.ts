import {
  plugin as tsPlugin,
  parser,
  configs,
} from 'typescript-eslint'
import vuePlugin from 'eslint-plugin-vue'
import vueParser from 'vue-eslint-parser'
import importNewlinesPlugin from 'eslint-plugin-import-newlines'
import stylisticPlugin from '@stylistic/eslint-plugin'

const tsRules = {
  'import-newlines/enforce': ['warn', {
    items: 0,
    semi: true,
  }],
  'object-curly-spacing': ['error', 'never'],
  'quotes': ['error', 'single'],
  'no-extra-semi': ['off'],
  'semi': ['warn', 'never'],
  'semi-spacing': ['off'],
  'semi-style': ['off'],
  /** Иногда нужно уточнить общий тип. */
  '@typescript-eslint/no-redundant-type-constituents': ['off'],
  '@typescript-eslint/ban-ts-comment': ['off'],
  '@typescript-eslint/consistent-return': ['warn'],
  '@typescript-eslint/consistent-type-exports': ['warn'],
  '@typescript-eslint/consistent-type-imports': ['error', {
    disallowTypeAnnotations: true,
    fixStyle: 'inline-type-imports',
    prefer: 'type-imports',
  }],
  '@typescript-eslint/explicit-function-return-type': ['warn', {
    allowExpressions: true,
    allowTypedFunctionExpressions: true,
    allowHigherOrderFunctions: true,
    allowDirectConstAssertionInArrowFunctions: true,
    allowConciseArrowFunctionExpressionsStartingWithVoid: false,
    allowFunctionsWithoutTypeParameters: false,
    allowedNames: [],
    allowIIFEs: false,
  }],
  '@typescript-eslint/explicit-member-accessibility': ['warn'],
  '@typescript-eslint/explicit-module-boundary-types': ['warn'],
  '@typescript-eslint/init-declarations': ['off'],
  '@typescript-eslint/method-signature-style': ['warn'],
  '@typescript-eslint/naming-convention': ['warn',
    {
      selector: 'default',
      format: ['strictCamelCase'],
    },
    {
      selector: 'variable',
      format: ['strictCamelCase'],
    },
    {
      selector: 'variable',
      types: ['boolean'],
      format: ['StrictPascalCase'],
      prefix: [
        'is',
        'should',
        'has',
        'can',
        'did',
        'will',
      ],
    },
    {
      selector: 'variable',
      modifiers: ['const'],
      format: [
        'strictCamelCase',
        'StrictPascalCase',
        'UPPER_CASE',
      ],
    },
    {
      selector: 'variable',
      modifiers: ['const'],
      format: [
        'strictCamelCase',
        'StrictPascalCase',
        'UPPER_CASE',
      ],
    },
    {
      selector: 'parameter',
      format: ['strictCamelCase'],
      leadingUnderscore: 'allow',
    },
    {
      selector: 'property',
      format: [
        'strictCamelCase',
        'UPPER_CASE',
      ],
      leadingUnderscore: 'allow',
    },
    {
      selector: 'typeLike',
      format: ['StrictPascalCase'],
    },
    {
      selector: 'interface',
      format: ['StrictPascalCase'],
      custom: {
        regex: '^I[A-Z]',
        match: false,
      },
    },
    {
      selector: [
        'property',
        'method',
        'accessor',
        'enumMember',
        'memberLike',
      ],
      format: null,
      modifiers: [
        'requiresQuotes',
      ],
    },
    {
      // @ts-ignore
      selector: 'import',
      format: [
        'StrictPascalCase',
        'strictCamelCase',
      ],
    }],
  '@typescript-eslint/no-array-delete': ['error'],
  /** Обрабатывается TypeScript. */
  '@typescript-eslint/no-confusing-void-expression': ['off'],
  '@typescript-eslint/no-deprecated': ['warn'],
  /** @todo Перепроверить правило. */
  '@typescript-eslint/no-explicit-any': ['error'],
  '@typescript-eslint/no-non-null-assertion': ['off'],
  '@typescript-eslint/no-invalid-this': ['warn'],
  '@typescript-eslint/no-redeclare': ['off'],
  '@typescript-eslint/no-require-imports': ['warn'],
  '@typescript-eslint/no-unnecessary-qualifier': ['warn'],
  '@typescript-eslint/no-unnecessary-template-expression': ['warn'],
  '@typescript-eslint/no-unused-vars': ['warn', {
    vars: 'all',
    args: 'after-used',
    ignoreRestSiblings: true,
  }],
  '@typescript-eslint/no-useless-empty-export': ['warn'],
  '@typescript-eslint/no-use-before-define': ['warn', {
    allowNamedExports: false,
    classes: false,
    enums: false,
    functions: false,
    ignoreTypeReferences: true,
    typedefs: false,
    variables: false,
  }],
  '@typescript-eslint/prefer-nullish-coalescing': ['warn'],
  '@typescript-eslint/prefer-readonly-parameter-types': ['off'],
  '@typescript-eslint/prefer-regexp-exec': ['warn'],
  '@typescript-eslint/promise-function-async': ['off'],
  '@typescript-eslint/require-array-sort-compare': ['warn'],
  '@typescript-eslint/require-await': ['warn'],
  '@typescript-eslint/sort-type-constituents': ['warn'],
  '@typescript-eslint/switch-exhaustiveness-check': ['error', {
    allowDefaultCaseForExhaustiveSwitch: false,
    requireDefaultForNonUnion: true,
  }],
  '@typescript-eslint/unified-signatures': ['warn'],
  '@typescript-eslint/max-params': ['off'],
  '@typescript-eslint/member-ordering': ['warn', {
    default: {
      /** @todo Заменить на 'natural-case-insensitive'. */
      order: 'alphabetically',
    },
  }],
  '@typescript-eslint/prefer-ts-expect-error': ['off'],
  '@typescript-eslint/strict-boolean-expressions': ['warn'],
  '@typescript-eslint/no-empty-object-type': ['warn', {
    allowInterfaces: 'with-single-extends',
    allowObjectTypes: 'never',
  }],
  '@typescript-eslint/no-unsafe-function-type': ['warn'],
  '@typescript-eslint/no-wrapper-object-types': ['warn'],
  '@typescript-eslint/no-array-constructor': ['warn'],
  '@typescript-eslint/no-duplicate-enum-values': ['warn'],
  '@typescript-eslint/no-dynamic-delete': ['warn'],
  '@typescript-eslint/no-extra-non-null-assertion': ['warn'],
  '@typescript-eslint/no-extraneous-class': ['warn'],
  '@typescript-eslint/no-invalid-void-type': ['warn'],
  '@typescript-eslint/no-loss-of-precision': ['warn'],
  '@typescript-eslint/no-misused-new': ['warn'],
  '@typescript-eslint/no-namespace': ['warn'],
  '@typescript-eslint/no-non-null-asserted-nullish-coalescing': ['warn'],
  '@typescript-eslint/no-non-null-asserted-optional-chain': ['warn'],
  '@typescript-eslint/no-this-alias': ['warn'],
  '@typescript-eslint/no-unnecessary-type-constraint': ['warn'],
  '@typescript-eslint/no-unsafe-declaration-merging': ['warn'],
  '@typescript-eslint/no-useless-constructor': ['warn'],
  '@typescript-eslint/no-var-requires': ['warn'],
  '@typescript-eslint/only-throw-error': ['warn'],
  '@typescript-eslint/prefer-as-const': ['warn'],
  '@typescript-eslint/prefer-literal-enum-member': ['warn'],
  '@typescript-eslint/triple-slash-reference': ['warn'],
  '@typescript-eslint/adjacent-overload-signatures': ['warn'],
  '@typescript-eslint/array-type': ['warn'],
  '@typescript-eslint/ban-tslint-comment': ['warn'],
  '@typescript-eslint/class-literal-property-style': ['warn'],
  '@typescript-eslint/consistent-generic-constructors': ['warn'],
  '@typescript-eslint/consistent-indexed-object-style': ['warn'],
  '@typescript-eslint/consistent-type-assertions': ['warn'],
  '@typescript-eslint/consistent-type-definitions': ['warn'],
  /** @todo Заменить на 'warn' и исправить проблему совместимости с tsconfig. */
  '@typescript-eslint/dot-notation': ['off', {
    allowKeywords: true,
    allowPattern: '',
    allowPrivateClassPropertyAccess: false,
    allowProtectedClassPropertyAccess: false,
    allowIndexSignaturePropertyAccess: false,
  }],
  '@typescript-eslint/no-confusing-non-null-assertion': ['warn'],
  '@typescript-eslint/no-empty-function': ['off'],
  '@typescript-eslint/no-empty-interface': ['warn'],
  '@typescript-eslint/no-inferrable-types': ['warn'],
  '@typescript-eslint/non-nullable-type-assertion-style': ['warn'],
  /** Уже проверяется правилом `unicorn/prefer-array-find`. */
  '@typescript-eslint/prefer-find': ['off'],
  '@typescript-eslint/prefer-for-of': ['warn'],
  '@typescript-eslint/prefer-function-type': ['warn'],
  '@typescript-eslint/prefer-namespace-keyword': ['warn'],
  '@typescript-eslint/prefer-optional-chain': ['warn'],
  '@typescript-eslint/prefer-promise-reject-errors': ['warn', {
    allowEmptyReject: true,
  }],
  '@typescript-eslint/prefer-string-starts-ends-with': ['warn'],
  '@typescript-eslint/await-thenable': ['warn'],
  '@typescript-eslint/no-base-to-string': ['warn'],
  '@typescript-eslint/no-meaningless-void-operator': ['warn'],
  '@typescript-eslint/no-mixed-enums': ['error'],
  '@typescript-eslint/no-duplicate-type-constituents': ['warn'],
  '@typescript-eslint/no-floating-promises': ['warn'],
  '@typescript-eslint/no-for-in-array': ['warn'],
  '@typescript-eslint/no-implied-eval': ['warn'],
  '@typescript-eslint/no-misused-promises': ['warn'],
  '@typescript-eslint/no-restricted-types': ['off'],
  '@typescript-eslint/no-unnecessary-parameter-property-assignment': ['warn'],
  '@typescript-eslint/no-unnecessary-type-assertion': ['warn'],
  '@typescript-eslint/no-unnecessary-type-parameters': ['warn'],
  '@typescript-eslint/no-unsafe-argument': ['warn'],
  '@typescript-eslint/no-unsafe-assignment': ['warn'],
  '@typescript-eslint/no-unsafe-call': ['warn'],
  '@typescript-eslint/no-unsafe-enum-comparison': ['warn'],
  '@typescript-eslint/no-unsafe-member-access': ['warn'],
  '@typescript-eslint/no-unsafe-return': ['warn'],
  '@typescript-eslint/no-unsafe-unary-minus': ['warn'],
  '@typescript-eslint/restrict-plus-operands': ['warn'],
  '@typescript-eslint/restrict-template-expressions': ['warn'],
  '@typescript-eslint/unbound-method': ['warn'],
  '@typescript-eslint/default-param-last': ['warn'],
  '@typescript-eslint/no-dupe-class-members': ['warn'],
  '@typescript-eslint/no-loop-func': ['warn'],
  '@typescript-eslint/no-magic-numbers': ['off', {
    detectObjects: false,
    enforceConst: true,
    ignore: [-1, 0, 1],
    ignoreArrayIndexes: true,
    ignoreClassFieldInitialValues: true,
    ignoreDefaultValues: true,
    ignoreEnums: true,
    ignoreNumericLiteralTypes: true,
    ignoreReadonlyClassProperties: true,
    ignoreTypeIndexes: true,
  }],
  '@typescript-eslint/no-shadow': ['warn'],
  '@typescript-eslint/no-unused-expressions': ['error', {
    allowShortCircuit: false,
    allowTernary: false,
    allowTaggedTemplates: false,
    enforceForJSX: false,
  }],
  '@typescript-eslint/return-await': ['warn', 'in-try-catch'],
  /** Предпочитаем inline import type. */
  '@typescript-eslint/no-import-type-side-effects': ['off'],
  /** Вместо правила исправить типы https://github.com/uhyo/better-typescript-lib */
  '@typescript-eslint/use-unknown-in-catch-callback-variable': ['error'],

  /** @todo Перепроверить правила ниже. */
  '@typescript-eslint/class-methods-use-this': ['off'],
  '@typescript-eslint/no-restricted-imports': ['off'],
  '@typescript-eslint/no-type-alias': ['off'],
  '@typescript-eslint/no-unnecessary-boolean-literal-compare': ['off'],
  '@typescript-eslint/no-unnecessary-condition': ['off'],
  '@typescript-eslint/no-unnecessary-type-arguments': ['off'],
  '@typescript-eslint/parameter-properties': ['off'],
  '@typescript-eslint/prefer-destructuring': ['off'],
  '@typescript-eslint/prefer-enum-initializers': ['off'],
  '@typescript-eslint/prefer-includes': ['warn'],
  '@typescript-eslint/prefer-readonly': ['off'],
  '@typescript-eslint/prefer-reduce-type-parameter': ['off'],
  '@typescript-eslint/prefer-return-this-type': ['off'],
  '@typescript-eslint/typedef': ['off'],
}
const stylisticRules = {
  '@stylistic/function-call-spacing': ['warn', 'never'],
  '@stylistic/indent-binary-ops': ['warn'],
  '@stylistic/multiline-comment-style': ['off'],
  /** Обрабатывается правилом arrow-parens. */
  '@stylistic/no-confusing-arrow': ['off'],
  '@stylistic/no-floating-decimal': ['warn'],
  '@stylistic/no-mixed-operators': ['warn', {
    groups: [
      [
        '%',
        '**',
      ],
      [
        '%',
        '+',
      ],
      [
        '%',
        '-',
      ],
      [
        '%',
        '*',
      ],
      [
        '%',
        '/',
      ],
      [
        '/',
        '*',
      ],
      [
        '&',
        '|',
        '<<',
        '>>',
        '>>>',
      ],
      [
        '==',
        '!=',
        '===',
        '!==',
      ],
      [
        '&&',
        '||',
      ],
    ],
    allowSamePrecedence: false,
  }],
  '@stylistic/one-var-declaration-per-line': ['warn'],
  '@stylistic/quote-props': ['warn', 'as-needed'],
  '@stylistic/spaced-comment': [
    'warn',
    'always',
    {
      line: {
        exceptions: [
          '-',
          '+',
        ],
        markers: [
          '=',
          '!',
          '/',
        ],
      },
      block: {
        exceptions: [
          '-',
          '+',
        ],
        markers: [
          '=',
          '!',
          ':',
          '::',
        ],
        balanced: true,
      },
    },
  ],
  '@stylistic/type-generic-spacing': ['warn'],
  '@stylistic/type-named-tuple-spacing': ['warn'],
  '@stylistic/member-delimiter-style': ['warn', {
    multiline: {
      delimiter: 'none',
      requireLast: true,
    },
    multilineDetection: 'brackets',
    singleline: {
      delimiter: 'semi',
      requireLast: false,
    },
  }],
  '@stylistic/type-annotation-spacing': ['warn', {
    after: true,
    before: false,
    overrides: {
      arrow: {
        after: true,
        before: true,
      },
    },
  }],
  '@stylistic/comma-dangle': ['warn', 'always-multiline'],
  '@stylistic/no-extra-semi': ['warn'],
  '@stylistic/quotes': ['warn', 'single', {
    avoidEscape: true,
  }],
  '@stylistic/array-bracket-newline': ['warn', 'consistent'],
  '@stylistic/array-bracket-spacing': ['warn', 'never'],
  '@stylistic/array-element-newline': ['warn', 'consistent'],
  '@stylistic/arrow-parens': ['warn', 'always'],
  '@stylistic/arrow-spacing': ['warn', {
    before: true,
    after: true,
  }],
  '@stylistic/block-spacing': ['warn', 'never'],
  '@stylistic/brace-style': ['warn', '1tbs', {
    allowSingleLine: false,
  }],
  '@stylistic/comma-spacing': ['warn', {
    before: false,
    after: true,
  }],
  '@stylistic/comma-style': ['warn', 'last'],
  '@stylistic/computed-property-spacing': ['warn', 'never'],
  /** @todo Настроить правило. */
  '@stylistic/curly-newline': ['off'],
  '@stylistic/dot-location': ['warn', 'property'],
  '@stylistic/eol-last': ['warn', 'always'],
  '@stylistic/func-call-spacing': ['warn', 'never'],
  '@stylistic/function-call-argument-newline': ['warn', 'consistent'],
  '@stylistic/function-paren-newline': ['warn', 'multiline-arguments'],
  '@stylistic/generator-star-spacing': ['warn', {
    before: false,
    after: true,
  }],
  '@stylistic/implicit-arrow-linebreak': ['warn', 'beside'],
  '@stylistic/indent': ['warn', 2],
  '@stylistic/key-spacing': ['warn'],
  '@stylistic/keyword-spacing': ['warn', {
    before: true,
    after: true,
    overrides: {
      return: {
        after: true,
      },
      throw: {
        after: true,
      },
      case: {
        after: true,
      },
    },
  }],
  '@stylistic/line-comment-position': ['off'],
  '@stylistic/linebreak-style': ['warn', 'unix'],
  '@stylistic/lines-between-class-members': ['warn', 'always', {
    exceptAfterSingleLine: false,
    exceptAfterOverload: true,
  }],
  '@stylistic/lines-around-comment': ['off'],
  '@stylistic/max-len': ['off'],
  '@stylistic/max-statements-per-line': ['warn', {
    max: 1,
  }],
  '@stylistic/multiline-ternary': ['warn', 'always-multiline'],
  '@stylistic/new-parens': ['warn', 'always'],
  '@stylistic/newline-per-chained-call': ['off'],
  '@stylistic/no-extra-parens': ['warn', 'all', {
    conditionalAssign: true,
    enforceForArrowConditionals: false,
    ignoreJSX: 'all',
    nestedBinaryExpressions: false,
    returnAssign: false,
    ternaryOperandBinaryExpressions: false,
    enforceForSequenceExpressions: false,
    enforceForNewInMemberExpressions: false,
    enforceForFunctionPrototypeMethods: false,
    allowParensAfterCommentPattern: 'any-string-pattern',
  }],
  '@stylistic/no-mixed-spaces-and-tabs': ['warn'],
  '@stylistic/no-multi-spaces': ['warn', {
    ignoreEOLComments: false,
  }],
  '@stylistic/no-multiple-empty-lines': ['warn', {
    max: 1,
    maxBOF: 0,
    maxEOF: 0,
  }],
  '@stylistic/no-tabs': ['warn'],
  '@stylistic/no-trailing-spaces': ['warn', {
    skipBlankLines: false,
    ignoreComments: false,
  }],
  '@stylistic/no-whitespace-before-property': ['warn'],
  '@stylistic/nonblock-statement-body-position': ['warn', 'below'],
  '@stylistic/object-curly-newline': ['warn', {
    ObjectExpression: {
      minProperties: 4,
      multiline: true,
      consistent: true,
    },
    ObjectPattern: {
      minProperties: 4,
      multiline: true,
      consistent: true,
    },
    ImportDeclaration: 'always',
    ExportDeclaration: {
      minProperties: 4,
      multiline: true,
      consistent: true,
    },
  }],
  '@stylistic/object-curly-spacing': ['warn', 'never'],
  '@stylistic/object-property-newline': ['warn', {
    allowAllPropertiesOnSameLine: true,
  }],
  '@stylistic/operator-linebreak': ['warn', 'before', {
    overrides: {
      '=': 'none',
    },
  }],
  '@stylistic/padded-blocks': [
    'warn',
    {
      blocks: 'never',
      classes: 'never',
      switches: 'never',
    },
    {
      allowSingleLineBlocks: true,
    },
  ],
  '@stylistic/padding-line-between-statements': ['warn'],
  '@stylistic/rest-spread-spacing': ['warn', 'never'],
  '@stylistic/semi': ['warn', 'never'],
  '@stylistic/semi-spacing': ['warn', {
    before: false,
    after: true,
  }],
  '@stylistic/semi-style': ['warn', 'last'],
  '@stylistic/space-before-blocks': ['warn'],
  '@stylistic/space-before-function-paren': ['warn', {
    anonymous: 'always',
    named: 'never',
    asyncArrow: 'always',
  }],
  '@stylistic/space-in-parens': ['warn', 'never'],
  '@stylistic/space-infix-ops': ['warn'],
  '@stylistic/space-unary-ops': ['warn', {
    words: true,
    nonwords: false,
    overrides: {},
  }],
  '@stylistic/switch-colon-spacing': ['warn', {
    after: true,
    before: false,
  }],
  '@stylistic/template-curly-spacing': ['warn'],
  '@stylistic/template-tag-spacing': ['warn', 'never'],
  '@stylistic/wrap-iife': ['warn', 'outside', {
    functionPrototypeMethods: false,
  }],
  '@stylistic/wrap-regex': ['off'],
  '@stylistic/yield-star-spacing': ['warn', 'after'],
}

const tsConfig = {
  files: ['**/*.?([cm])ts'],
  plugins: {
    '@typescript-eslint': tsPlugin,
    'import-newlines': importNewlinesPlugin,
    '@stylistic': stylisticPlugin,
  },
  languageOptions: {
    parser,
    parserOptions: {
      allowAutomaticSingleRunInference: true,
      ecmaFeatures: {
        globalReturn: false,
        impliedStrict: true,
        jsx: false
      },
      ecmaVersion: "latest",
      emitDecoratorMetadata: true,
      extraFileExtensions: [".vue"],
      projectService: true,
      sourceType: "module"
    },
  },
  rules: {
    ...tsRules,
    ...stylisticRules,
  },
}

const vueRules = {
  ...tsRules,
  'vue/array-bracket-newline': ['off', 'consistent'],
  'vue/array-bracket-spacing': ['warn', 'never'],
  'vue/arrow-spacing': ['warn', {
    after: true,
    before: true,
  }],
  'vue/attribute-hyphenation': ['warn', 'never'],
  'vue/block-lang': ['warn', {
    script: {
      lang: 'ts',
    },
  }],
  'vue/block-spacing': ['warn', 'always'],
  'vue/block-tag-newline': ['warn'],
  'vue/brace-style': ['warn', '1tbs', {
    allowSingleLine: true,
  }],
  'vue/comma-dangle': ['warn', {
    arrays: 'always-multiline',
    exports: 'always-multiline',
    functions: 'always-multiline',
    imports: 'always-multiline',
    objects: 'always-multiline',
  }],
  'vue/comma-spacing': ['warn', {
    after: true,
    before: false,
  }],
  'vue/comma-style': ['warn', 'last', {
    exceptions: {
      ArrayExpression: false,
      ArrayPattern: false,
      ArrowFunctionExpression: false,
      CallExpression: false,
      FunctionDeclaration: false,
      FunctionExpression: false,
      ImportDeclaration: false,
      NewExpression: false,
      ObjectExpression: false,
      ObjectPattern: false,
      VariableDeclaration: false,
    },
  }],
  'vue/component-api-style': ['warn', [
    'script-setup',
  ]],
  'vue/component-name-in-template-casing': ['warn', 'PascalCase', {
    registeredComponentsOnly: false,
    ignores: [
      'masonry-layout',
      'search',
    ],
  }],
  'vue/component-options-name-casing': ['error', 'PascalCase'],
  'vue/block-order': ['warn', {
    order: [
      'script',
      'template',
      'style',
    ],
  }],
  'vue/custom-event-name-casing': ['warn', 'camelCase'],
  'vue/define-macros-order': ['off'],
  'vue/dot-location': ['error', 'property'],
  'vue/dot-notation': ['off'],
  'vue/enforce-style-attribute': ['warn', {
    allow: ['scoped'],
  }],
  'vue/eqeqeq': ['error', 'always'],
  'vue/func-call-spacing': ['warn', 'never'],
  'vue/html-button-has-type': ['error'],
  'vue/html-comment-content-newline': ['off'],
  'vue/html-comment-content-spacing': ['warn'],
  'vue/html-comment-indent': ['off'],
  'vue/key-spacing': ['warn', {
    afterColon: true,
    beforeColon: false,
  }],
  'vue/keyword-spacing': ['warn', {
    after: true,
    before: true,
    overrides: {
      case: {
        after: true,
      },
      return: {
        after: true,
      },
      throw: {
        after: true,
      },
    },
  }],
  /** Не пишем название компонента. */
  'vue/match-component-file-name': ['off'],
  /** Не используем Options Api. */
  'vue/match-component-import-name': ['off'],
  'vue/multi-word-component-names': ['off'],
  'vue/next-tick-style': ['error'],
  'vue/no-bare-strings-in-template': ['warn'],
  'vue/no-boolean-default': ['warn', 'default-false'],
  // 'vue/no-deprecated-delete-set': ['error'],
  'vue/no-constant-condition': ['warn'],
  'vue/no-dupe-keys': ['off'],
  'vue/no-duplicate-attr-inheritance': ['error'],
  'vue/no-empty-component-block': ['error'],
  'vue/no-empty-pattern': ['error'],
  'vue/no-extra-parens': ['warn', 'all', {
    conditionalAssign: true,
    enforceForArrowConditionals: false,
    ignoreJSX: 'all',
    nestedBinaryExpressions: false,
    returnAssign: false,
    ternaryOperandBinaryExpressions: false,
    enforceForSequenceExpressions: false,
    enforceForNewInMemberExpressions: false,
    enforceForFunctionPrototypeMethods: false,
    allowParensAfterCommentPattern: 'any-string-pattern',
  }],
  'vue/no-irregular-whitespace': ['warn'],
  'vue/no-loss-of-precision': ['error'],
  'vue/no-multiple-objects-in-class': ['error'],
  'vue/no-potential-component-option-typo': ['error'],
  'vue/no-restricted-syntax': [
    'error',
    {
      message: 'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
      selector: 'ForInStatement',
    },
    {
      message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
      selector: 'ForOfStatement',
    },
    {
      message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
      selector: 'LabeledStatement',
    },
    {
      message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
      selector: 'WithStatement',
    },
    {
      selector: 'TSEnumDeclaration',
      message: 'Не используем enum. Подробности: https://github.com/shian15810/eslint-plugin-typescript-enum',
    },
    {
      selector: 'ClassDeclaration',
      message: 'Не используем class. Только функциональное программирование. Только хардкор.',
    },
    {
      selector: 'FunctionDeclaration',
      message: 'Просто используйте Function Expression.',
    },
  ],
  'vue/no-sparse-arrays': ['error'],
  'vue/no-static-inline-styles': ['error'],
  'vue/no-template-target-blank': ['error'],
  'vue/no-this-in-before-route-enter': ['error'],
  'vue/no-undef-properties': ['error'],
  'vue/no-unused-emit-declarations': ['warn'],
  'vue/no-unused-properties': ['warn'],
  'vue/no-unused-refs': ['error'],
  'vue/no-useless-concat': ['error'],
  'vue/no-useless-mustaches': ['error'],
  'vue/no-useless-v-bind': ['error'],
  'vue/no-v-text': ['warn'],
  'vue/object-curly-newline': ['warn', {
    ObjectExpression: {
      minProperties: 4,
      multiline: true,
      consistent: true,
    },
    ObjectPattern: {
      minProperties: 4,
      multiline: true,
      consistent: true,
    },
    ImportDeclaration: 'always',
    ExportDeclaration: {
      minProperties: 4,
      multiline: true,
      consistent: true,
    },
  }],
  'vue/object-curly-spacing': ['warn', 'never'],
  'vue/object-property-newline': ['warn', {
    allowAllPropertiesOnSameLine: true,
  }],
  'vue/object-shorthand': [
    'error',
    'always',
    {
      avoidQuotes: true,
      ignoreConstructors: false,
    },
  ],
  'vue/operator-linebreak': [
    'error',
    'before',
    {
      overrides: {
        '=': 'none',
      },
    },
  ],
  'vue/padding-line-between-blocks': ['warn'],
  'vue/padding-line-between-tags': ['off'],
  'vue/prefer-prop-type-boolean-first': ['warn'],
  'vue/prefer-separate-static-class': ['warn'],
  'vue/prefer-template': ['warn'],
  'vue/prefer-true-attribute-shorthand': ['warn'],
  'vue/quote-props': ['warn', 'as-needed'],
  'vue/require-direct-export': ['error'],
  'vue/require-emit-validator': ['error'],
  /** Не работает при импорте типов. */
  'vue/require-explicit-slots': ['off'],
  'vue/require-expose': ['off'],
  /** Не именуем компоненты. */
  'vue/require-name-property': ['off'],
  'vue/return-in-computed-property': ['off'],
  'vue/script-indent': ['warn', 2, {
    baseIndent: 0,
    switchCase: 1,
  }],
  'vue/space-in-parens': ['warn', 'never'],
  'vue/space-infix-ops': ['warn'],
  'vue/space-unary-ops': ['warn', {
    nonwords: false,
    overrides: {},
    words: true,
  }],
  'vue/static-class-names-order': ['off'],
  'vue/template-curly-spacing': ['warn'],
  'vue/v-for-delimiter-style': ['error'],
  'vue/v-on-event-hyphenation': ['error', 'never', {
    autofix: true,
  }],
  'vue/attributes-order': ['off'],
  'vue/no-lone-template': ['warn'],
  'vue/no-multiple-slot-args': ['warn'],
  'vue/no-v-html': ['warn'],
  'vue/order-in-components': ['warn'],
  'vue/this-in-template': ['warn'],
  'vue/component-definition-name-casing': ['warn'],
  'vue/first-attribute-linebreak': ['warn'],
  'vue/html-closing-bracket-newline': ['warn'],
  'vue/html-closing-bracket-spacing': ['warn'],
  'vue/html-end-tags': ['warn'],
  'vue/html-indent': ['warn'],
  'vue/html-quotes': ['warn'],
  'vue/html-self-closing': ['warn'],
  'vue/max-attributes-per-line': ['warn'],
  'vue/multiline-html-element-content-newline': ['warn'],
  'vue/mustache-interpolation-spacing': ['warn'],
  'vue/no-multi-spaces': ['warn'],
  'vue/no-spaces-around-equal-signs-in-attribute': ['warn'],
  'vue/no-template-shadow': ['warn'],
  'vue/one-component-per-file': ['warn'],
  'vue/prop-name-casing': ['warn'],
  'vue/require-default-prop': ['warn'],
  'vue/require-explicit-emits': ['warn'],
  'vue/require-prop-types': ['warn'],
  'vue/singleline-html-element-content-newline': ['warn'],
  'vue/v-bind-style': ['warn'],
  'vue/v-if-else-key': ['off'],
  'vue/v-on-style': ['warn'],
  'vue/v-slot-style': ['warn'],
  'vue/no-arrow-functions-in-watch': ['error'],
  'vue/no-async-in-computed-properties': ['error'],
  'vue/no-child-content': ['error'],
  'vue/no-computed-properties-in-data': ['error'],
  'vue/no-deprecated-data-object-declaration': ['error'],
  'vue/no-deprecated-destroyed-lifecycle': ['error'],
  'vue/no-deprecated-dollar-listeners-api': ['error'],
  'vue/no-deprecated-dollar-scopedslots-api': ['error'],
  'vue/no-deprecated-events-api': ['error'],
  'vue/no-deprecated-filter': ['error'],
  'vue/no-deprecated-functional-template': ['error'],
  'vue/no-deprecated-html-element-is': ['error'],
  'vue/no-deprecated-inline-template': ['error'],
  'vue/no-deprecated-props-default-this': ['error'],
  'vue/no-deprecated-router-link-tag-prop': ['error'],
  'vue/no-deprecated-scope-attribute': ['error'],
  'vue/no-deprecated-slot-attribute': ['error'],
  'vue/no-deprecated-slot-scope-attribute': ['error'],
  'vue/no-deprecated-v-bind-sync': ['error'],
  /** v-is удален из Vue. */
  'vue/no-deprecated-v-is': ['off'],
  'vue/no-deprecated-v-on-native-modifier': ['error'],
  'vue/no-deprecated-v-on-number-modifiers': ['error'],
  'vue/no-deprecated-vue-config-keycodes': ['error'],
  'vue/no-dupe-v-else-if': ['error'],
  'vue/no-duplicate-attributes': ['error'],
  'vue/no-export-in-script-setup': ['error'],
  'vue/no-expose-after-await': ['error'],
  'vue/no-lifecycle-after-await': ['error'],
  'vue/no-mutating-props': ['error'],
  'vue/no-parsing-error': ['error'],
  'vue/no-ref-as-operand': ['error'],
  'vue/no-reserved-component-names': ['error'],
  'vue/no-reserved-keys': ['error'],
  'vue/no-reserved-props': ['error'],
  'vue/no-shared-component-data': ['error'],
  'vue/no-side-effects-in-computed-properties': ['error'],
  'vue/no-template-key': ['error'],
  'vue/no-textarea-mustache': ['error'],
  'vue/no-unused-components': ['error'],
  'vue/no-unused-vars': ['warn'],
  'vue/no-use-computed-property-like-method': ['error'],
  'vue/no-use-v-if-with-v-for': ['error'],
  'vue/no-useless-template-attributes': ['error'],
  'vue/no-v-for-template-key-on-child': ['error'],
  'vue/no-v-text-v-html-on-component': ['error'],
  'vue/no-watch-after-await': ['error'],
  'vue/prefer-import-from-vue': ['error'],
  'vue/require-component-is': ['error'],
  'vue/require-prop-type-constructor': ['error'],
  'vue/require-render-return': ['error'],
  'vue/require-slots-as-functions': ['error'],
  'vue/require-toggle-inside-transition': ['error'],
  'vue/require-v-for-key': ['error'],
  'vue/require-valid-default-prop': ['error'],
  'vue/require-default-export': ['off'],
  'vue/return-in-emits-validator': ['error'],
  'vue/use-v-on-exact': ['error'],
  'vue/valid-attribute-name': ['error'],
  'vue/valid-define-emits': ['error'],
  'vue/valid-define-options': ['error'],
  'vue/valid-define-props': ['error'],
  'vue/valid-next-tick': ['error'],
  'vue/valid-template-root': ['error'],
  'vue/valid-v-bind': ['error'],
  'vue/valid-v-cloak': ['error'],
  'vue/valid-v-else-if': ['error'],
  'vue/valid-v-else': ['error'],
  'vue/valid-v-for': ['error'],
  'vue/valid-v-html': ['error'],
  'vue/valid-v-if': ['error'],
  /** v-is удален из Vue. */
  'vue/valid-v-is': ['off'],
  'vue/valid-v-memo': ['error'],
  'vue/valid-v-model': ['error'],
  'vue/valid-v-on': ['error'],
  'vue/valid-v-once': ['error'],
  'vue/valid-v-pre': ['error'],
  'vue/valid-v-show': ['error'],
  'vue/valid-v-slot': ['error'],
  'vue/valid-v-text': ['error'],
  'vue/comment-directive': ['error'],
  'vue/jsx-uses-vars': ['error'],
  'vue/define-emits-declaration': ['warn', 'type-based'],
  'vue/define-props-declaration': ['warn', 'type-based'],
  'vue/max-lines-per-block': ['off'],
  'vue/max-props': ['off'],
  'vue/max-template-depth': ['off'],
  'vue/new-line-between-multi-line-property': ['off'],
  'vue/no-deprecated-model-definition': ['warn'],
  'vue/no-ref-object-reactivity-loss': ['off'],
  'vue/no-required-prop-with-default': ['warn'],
  'vue/no-restricted-v-on': ['off'],
  'vue/no-root-v-if': ['warn'],
  'vue/no-setup-props-reactivity-loss': ['warn'],
  'vue/no-undef-components': ['error', {
    ignorePatterns: [
      'ModalsContainer',
      'VueFinalModal',
      'masonry-layout',
      'search',
    ],
  }],
  /** Используем последнюю версию. */
  'vue/no-unsupported-features': ['off'],
  'vue/no-use-v-else-with-v-for': ['warn'],
  /** Не используем Options Api. */
  'vue/padding-lines-in-component-definition': ['off'],
  'vue/prefer-define-options': ['warn'],
  'vue/require-macro-variable-name': ['warn'],
  /** Было бы правильно писать доку к пропсам, но это уж слишком. */
  'vue/require-prop-comment': ['off', {
    type: 'JSDoc',
  }],
  /** Используем type-based описания пропсов. */
  'vue/require-typed-object-prop': ['off'],
  'vue/require-typed-ref': ['error'],
  'vue/sort-keys': ['off'],
  /** Стиль написания не важен, т.к. компилятор все равно оптимизирует. */
  'vue/v-on-handler-style': ['off', ['method', 'inline']],
  'vue/array-element-newline': ['warn', 'consistent'],
  'vue/camelcase': ['off'],
  'vue/max-len': ['off'],
  'vue/multiline-ternary': ['warn', 'always-multiline'],
  'vue/no-console': ['warn'],
  /** @todo Описать правила ниже. */
  'vue/no-restricted-block': ['off'],
  'vue/no-restricted-call-after-await': ['off'],
  'vue/no-restricted-class': ['off'],
  'vue/no-restricted-component-names': ['off'],
  'vue/no-restricted-component-options': ['off'],
  'vue/no-restricted-custom-event': ['off'],
  'vue/no-restricted-html-elements': ['off'],
  'vue/no-restricted-props': ['off'],
  'vue/no-restricted-static-attribute': ['off'],
  'vue/no-restricted-v-bind': ['off'],
}
const vueConfig = {
  files: ['**/*.vue'],
  plugins: {
    vue: vuePlugin,
    '@typescript-eslint': tsPlugin,
    'import-newlines': importNewlinesPlugin,
    '@stylistic': stylisticPlugin,
  },
  processor:  vuePlugin.processors['.vue'],
  languageOptions: {
    parser: vueParser,
    parserOptions: {
      ecmaFeatures: {
        globalReturn: false,
        impliedStrict: true,
        jsx: true,
      },
      ecmaVersion: 'latest',
      emitDecoratorMetadata: true,
      extraFileExtensions: ['.vue'],
      parser: '@typescript-eslint/parser',
      sourceType: 'module',
      /**
       * @todo Разобраться с производительностью.
       * @see https://github.com/vuejs/vue-eslint-parser/issues/104
       * @see https://github.com/typescript-eslint/typescript-eslint/issues/2094
       */
      // project: ['tsconfig.app.json', 'tsconfig.node.json'],
      /** @see https://typescript-eslint.io/packages/parser/#experimental_useprojectservice */
      // projectService: true,
    },
  },
  rules: {
    ...stylisticRules,
    ...tsRules,
    ...vueRules,
    ...configs.disableTypeChecked.rules,
  },
}

export default [tsConfig, vueConfig]
